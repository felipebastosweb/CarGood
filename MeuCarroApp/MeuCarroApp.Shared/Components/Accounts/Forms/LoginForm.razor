@using MeuCarroApp.Shared.Components.Core.Contexts
@using MeuCarroApp.Shared.Components.Accounts.Interfaces
@using MeuCarroApp.Shared.Components.Accounts.Records
@using MeuCarroApp.Shared.Components.Accounts.Repositories

@inject NavigationManager Navigation

<h3>User Login</h3>
<EditForm Model="input" OnSubmit="OnLoginSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Username</label>
        <InputText @bind-Value="input!.Username" class="form-control" />
    </div>
    <div class="mb-3">
        <label class="form-label">Password</label>
        <InputText type="password" @bind-Value="input!.Password" class="form-control" />
    </div>
    <div class="mb-3 form-check">
        <InputCheckbox @bind-Value="input!.KeepConnected" class="form-check-input" id="keepConnected" />
        <label class="form-check-label" for="keepConnected">Keep Connected</label>
    </div>
    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Confirm</button>
    </div>

    <div class="mb-3">
        @if (output != null)
        {
            <p>Usuário logado: @output!.Username</p>
        }
    </div>
</EditForm> 


@code
{
    public IUserRepository repository { get; set; } = null!;
    private LoginInput? input { get; set; }

    private LoginOutput? output { get; set; } = null!;

    protected override void OnInitialized()
    {
        input = new()
        {
            Username = string.Empty,
            Password = string.Empty,
            KeepConnected = false
        };
            
        repository = new UserSQLiteRepository(new SQLiteContexts());
        base.OnInitialized();
    }

    private async Task OnLoginSubmit()
    {
        output = await repository.Login(input!);
        await Task.Delay(1000);
        Navigation.NavigateTo("dash");
    }

}
